# openssl Vorbereitungen
# Extract public Key from root_ca

# 1. 
# openssl x509 -pubkey -noout -in root_ca_crv.pem > root_ca_pubkey.pem

# 2.
# openssl rsa -noout -text -inform PEM -in root_ca_pubkey.pem -pubin

#RSA Public-Key: (4096 bit)
#Modulus:
#    00:ab:4d:98:e8:47:7e:0b:15:a3:a8:1c:cd:8e:9d:
#    d9:14:ae:b9:7a:5c:b5:6b:07:4b:db:9b:8b:28:64:
#    9a:8d:fa:34:9d:b9:d5:d2:4a:4b:1d:2a:4c:c2:4c:
#    57:18:f4:79:b2:b3:65:e2:85:54:55:b2:50:c1:21:
#    af:76:54:6b:6a:3a:18:70:80:9a:92:f6:cb:c2:0e:
#    66:4b:f1:8f:89:a0:4b:12:32:b2:f6:7b:a5:a4:2c:
#    0a:21:22:7a:c2:36:20:e5:05:e4:5a:41:ea:03:b3:
#    a4:43:5d:58:52:1c:95:4d:2e:fd:a1:2c:9c:be:3a:
#    10:c0:31:45:b9:87:63:37:54:2d:7d:2a:04:15:dd:
#    96:10:bc:db:da:ed:b6:52:9c:ee:18:11:67:09:ab:
#    7b:49:ba:c9:8b:6d:f5:57:f2:59:54:00:91:b3:e7:
#    3c:f9:91:ee:8d:60:05:85:63:29:f9:02:7b:88:01:
#    b6:ef:81:30:1e:29:63:ba:d5:0d:ae:16:17:5b:07:
#    de:16:82:f9:18:c9:87:0a:04:70:f3:5e:27:ce:92:
#    12:14:23:02:ef:25:39:0b:2f:3b:96:3a:4f:fb:f9:
#    4f:46:85:6d:49:08:0c:f5:7f:69:fa:23:12:72:0d:
#    35:8e:8c:8b:88:df:a8:28:53:d5:d0:d1:f9:cf:7d:
#    73:26:cd:d3:7b:e5:6c:5d:85:0a:19:45:30:6e:45:
#    c8:34:c7:74:b5:44:dd:a4:cf:40:8b:12:d0:b8:57:
#    ad:2f:b1:d7:87:75:4a:25:dc:57:16:8b:65:40:db:
#    29:dc:9b:57:c0:47:44:b4:ac:cc:07:69:9b:12:14:
#    c3:15:4e:9f:0f:b4:e9:3e:fc:01:f6:8a:2b:11:66:
#    19:7d:1d:cd:67:97:94:ec:10:e5:f5:c7:24:5d:8b:
#    07:e1:87:36:4f:29:56:b7:5c:76:15:0c:17:fe:9e:
#    27:11:c4:b9:a1:4b:d3:88:05:57:7b:27:71:0e:73:
#    9e:4d:ef:b8:19:29:63:91:05:0d:c7:9b:e6:f4:16:
#    48:6e:79:b6:44:17:42:7e:44:2f:2c:f8:d9:32:fc:
#    3f:3c:51:c1:d7:e1:95:6b:e1:07:c8:05:14:97:be:
#    cc:5c:59:92:66:b5:89:6f:27:a3:e3:23:58:8f:5a:
#    e3:80:0a:e0:72:58:b0:1e:82:4b:3b:15:4b:dc:8b:
#    2a:c4:e3:87:85:cd:7d:9d:90:f1:f5:bb:4d:e6:3b:
#    21:a1:08:c5:47:d3:63:f3:f3:8e:3d:61:9c:9e:b3:
#    84:4e:19:98:0e:06:e8:6f:e6:74:88:5c:f6:af:6b:
#    2f:c0:a2:25:0e:4b:0c:40:e9:de:a4:4a:4d:0b:4d:
#    be:98:5d
#Exponent: 65537 (0x10001)


# Validierung der Berechnungen mit eigenem Schlüsselpaar.
# 3. vergleichbares Schlüsselpaar generieren!
# openssl  genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4069 -out test_rsa.pem

# 4. Informationen aus Schlüsselpaar holen
# openssl rsa -in test_rsa.pem -text -noout


# 5 extract  Public Key
# openssl rsa -noout -text -inform PEM -in pubic_test_rsa_key.pem -pubin

# 6. Public Key aus Schlüsselpaar extrahieren!
# openssl pkey -in test_rsa.pem pubout -out pubic_test_rsa_key.pem


# 7 Get Private Key
# openssl pkcs8 -topk8 -inform PEM -outform PEM -in test_rsa.pem  -out private_key.pem -nocrypt


# 8. Private Key aus PEM anzeien!
# openssl rsa -noout -text -inform PEM -in private_key.pem



import binary
#import base64
#import numpy
from sympy import mod_inverse



def binary(e):
    return bin(e)[2:]

def modexp(m, e, n):
    s=1
    for b in binary(e):
        s=s*s % n
        if b=="1":
            s=s*m % n
    return s


prime_p = 0x00ed6aff6c7f92fff7df8bdf7bf864149111fe8647354be27385471ad3455023ffa7088716f04cc6f24003a64e5ccd8e800bfd0849a7ab2cd375af502c07c83229a90190c86f60b332ef2a1aa969f239b2c8c54d390aa8dbf1d23e151e2a36d1d0de03fb554a7fbf10efefd93ddf48fa174c3083b35ea47449f0c51c4564a9428d2005a006770241f06e6f1ca93a54500f7cb5824d68c54e309d7d8d9d81fd04c420dfc90a289dd51e41f42e73b8db0bbbd19684a857f0854ee3c649b85b27f747954890bcad7428cf6fa7709d07a03ecd71ed4e39e002dcd95eaca9418a56223aa975837d7c6b60af53554f7cdab4cdb4e58eb6914d8f6e0a4b2cc079e961cf29
prime_q = 0x00d2fd4935072ad25734211b191933dc14bec0c6a6eaec2b2d8256efcb1a9cd2698dfef200c67e22cf2e17170417b237cfbedf5dda45c28a1e1e175adc03dd4b61872a5177594109e286b436147bc1c6bd3662d1d13b6cf58f1ddfa8d260f14918265e8716b952c10c2abaf6d493138628cee6aa66122f5b9396daec9c6141d4f7432a7d48770c98a939ebe9cfd627a70f75bb5565bae92d881f148c5326637edbf06d5a63243c86e251360e5ccbb0582b01593a370f646d656792c53f88b84e0c91914523d83b1234ea7c1be85dea7d0765d17023bca2e7d25b9ae07816e1d5552d7c3bed5ec55f2e27422b626db7cfd706bbc2a232ecdfdaed1d4383af19fd7d
modul_n = prime_p * prime_q
public_key = modul_n
#public_key = 0x00ab4d98e8477e0b15a3a81ccd8e9dd914aeb97a5cb56b074bdb9b8b28649a8dfa349db9d5d24a4b1d2a4cc24c5718f479b2b365e2855455b250c121af76546b6a3a1870809a92f6cbc20e664bf18f89a04b1232b2f67ba5a42c0a21227ac23620e505e45a41ea03b3a4435d58521c954d2efda12c9cbe3a10c03145b9876337542d7d2a0415dd9610bcdbdaedb6529cee18116709ab7b49bac98b6df557f259540091b3e73cf991ee8d6005856329f9027b8801b6ef81301e2963bad50dae16175b07de1682f918c9870a0470f35e27ce9212142302ef25390b2f3b963a4ffbf94f46856d49080cf57f69fa2312720d358e8c8b88dfa82853d5d0d1f9cf7d7326cdd37be56c5d850a1945306e45c834c774b544dda4cf408b12d0b857ad2fb1d787754a25dc57168b6540db29dc9b57c04744b4accc07699b1214c3154e9f0fb4e93efc01f68a2b1166197d1dcd679794ec10e5f5c7245d8b07e187364f2956b75c76150c17fe9e2711c4b9a14bd38805577b27710e739e4defb819296391050dc79be6f416486e79b64417427e442f2cf8d932fc3f3c51c1d7e1956be107c8051497becc5c599266b5896f27a3e323588f5ae3800ae07258b01e824b3b154bdc8b2ac4e38785cd7d9d90f1f5bb4de63b21a108c547d363f3f38e3d619c9eb3844e19980e06e86fe674885cf6af6b2fc0a2250e4b0c40e9dea44a4d0b4dbe985d
public_e = 0x010001
private_d = 0x7cfc1d58269ab5b47745863f2091a74e99a76bec78004afbbc0abe15353a8815f4262eb6ca2bf3fcefcbf43da736d527d5a74e542be39f53567e4ac83eb993fb554e75db979a1f6eb64d6a7a14cb3be6ba1a41554adacc24ca5c1193719766d0546d84590a8c6f6baf1b94942f8da71bbe07c56930ad18205194c53088fc99e2fd3de500371ed455d0fc30c243413d3fdd47f4c6d3062814fa2fa29394a679a2bb9165f1ef6993e26f4361547e0f65a8bac9480fc30d1ef9969447fb73ee68bc560cd2e116ede4ded3d1aa6fd34835a1686cb07fadf2c9c17790bbd9e204ca0defabf9a2cbfd5364f93765fffc73ecc933b367b0d7917aacc8aa07e35c7b0dd1a859e7a451025648f90e000c39ef9d8b61cd0578b50d242114576924aefbb1e8835785bab4f79483d65caa6c1e4d0699a2412eb53809b4363f2d0c9a2334ea0952bf95e920f5afb43201210d0f9c3b61a510b3d2f27470e1d263d0a3e503648b99bab5bc306cefa2bcce65340e32f38eeeddd40441e6955348c7a166b5640ef31a4d3cde3c4594d5c5c20453790b6dd7153788ff72b5709f9c252a1e093046e9d25dca74ad6bed51a818e7a9a04459cfa461feb1eb625c5aac74a061da71bc8b273845fe5f61eb3b24e09efffe8301f7d1275d967492fe9966e2eccf3374b591bf2de595fb9b9d319345b60489d9a3768147d5a0b50f4745e8ed77cc10d72ce1
#phi = (prime_p - 1 ) * (prime_q - 1)
#private_d = mod_inverse(public_e,phi)
#print(hex(private_d))
plain_text = 0xAABBCCDDEEFF
#cypher = modexp(plain_text,public_e,modul_n)
signature = modexp(plain_text,private_d,public_key)
print("Klartext:")
print( hex(plain_text) )
#print('Rückrechnung erfolgt:')
#new_plain = modexp(cypher,private_d,modul_n)
#print(hex(cypher))
#signature = 0x0448627A0E1FDA5CE52ED12DE4B7C23AFB236959EE2165D5FA7B6E71E2D3A00B313B7A6379BD57EC283BAB246BD6574AE211886A0DEFB11C015C4918E6C189F26A8CA57873753D725C95F1834C27FC26811909560C34DB3B4B51234044DF06C923AA052DD5176DADE6027B70A67C51AB19099983D4F501AAEA63FFE10C72983D145625F7A3568E8A4DF9AD0FCE32D32E35D2C5924939095767E95C5B502624F7025BF80C95855547F0DE5EE94B44B0AB8657C2B314E8E015BFBBFE91C3910FDDE3B348916DA92D1B42C7366AD2C7BE353071477D42895F8A06B1598FA36D179881359C7C122E3D7189C9ECFB615C2E13B3D96B7C9BEDDCA8
print("Signatur:")
print(hex(signature))
print('Rückrechnung Klartext:')
new_signature = modexp(signature,public_e,public_key)
print(hex(new_signature))



